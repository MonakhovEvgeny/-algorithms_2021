"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""


import time

x_lst = []
x_dct = {}
n = 1000


def timer(func):
    def wrapper(x):
        start = time.time()
        func(x)
        end = time.time()
        print(f'время выполнения - {end - start} \n')

    return wrapper


@timer
def test_lst_1(x_lst):
    for i in range(n):
        x_lst.append(i)  # O(1)
    print('заполнение списка ')


@timer
def test_lst_2(x_lst):
    x_lst.pop()  # O(1)
    print('удаление элемента списка')


@timer
def test_lst_3(x_lst):
    x_lst.copy()  # O(1) так как n = конкретное число
    print('копирование списка')


@timer
def test_lst_4(x_lst):
    x_lst.clear()  # O(1)
    print('очищение списка')


#################################################################################

@timer
def test_dct_1(x_dct):
    x_dct = {a: a for a in range(n)}  # O(1)

    print(f'заполнение словаря')


@timer
def test_dct_2(x_dct):
    x_dct.popitem()  # O(1)
    print('удаление элемента словаря')


@timer
def test_dct_3(x_dct):
    x_dct.copy()  # O(1)
    print('копирование словаря')


@timer
def test_dct_4(x_dct):
    x_dct.clear()  # O(1)
    print('очищение словаря')


test_lst_1(x_lst)
# print(x_lst)
test_dct_1(x_dct)
# print(x_dct)
x_dct = {a: a for a in range(n)}
test_lst_2(x_lst)
# print(x_lst)
test_dct_2(x_dct)
# print(x_dct)
test_lst_3(x_lst)
test_dct_3(x_dct)
test_lst_4(x_lst)
test_dct_4(x_dct)

#################################################################################
'''
    Везде, кроме операции удаления, списки оказались быстрее. Я думаю это потому,
что в словаре заполняются и ключ и значение, т.е. при одинаковом 'n' в словаре 
данных в два раза больше чем в списках. Все операции получились со сложностью О(1),
это тоже сыграло свою роль.

'''
